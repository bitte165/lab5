package ru.bitte.lab5.commands;

import ru.bitte.lab5.CollectionKeeper;
import ru.bitte.lab5.Parser;
import ru.bitte.lab5.Terminal;

import javax.xml.transform.TransformerException;
import java.io.File;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * An object of this class is used in {@link Terminal} as a command that saves the maintained collection to file with
 * an autogenerated name. The route objects are saved to an {@code .xml} file with all of their fields, including
 * the {@code id} and {@code creationDate}. The saved elements in the file can later be used to start
 * the program with them, except that the ID and creation date would be ignored and instantiated as new.
 * The name of the file is generated as: "collection_yyyy-MM-dd_HH-mm-ss.xml".
 * The object of this class is used by running the {@code run()} method.
 * @implNote A no-argument command
 */
public class SaveCommand extends Command {
    private final CollectionKeeper collection;
    private final Parser parser;

    /**
     * Constructs a {@code SaveCommand} object.
     * @param collection the reference to a collection keeper of elements
     * @param parser a reference to a {@link Parser} instance used for saving to a file
     */
    public SaveCommand(CollectionKeeper collection, Parser parser) {
        super("save", "save the collection to a file");
        this.collection = collection;
        this.parser = parser;
    }

    @Override
    public void run() {
        String fileName = "collection_" +
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".xml";
        try {
            parser.writeToFile(collection.copyCollection(), new File(fileName));
            System.out.println("Successfully saved the collection to: " + fileName);
            } catch (TransformerException e) {
                System.out.println("Couldn't save the file because:\n" + e.getMessage());
        }
    }
}
